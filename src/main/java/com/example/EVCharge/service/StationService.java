package com.example.EVCharge.service;

import com.example.EVCharge.models.Station;
import com.example.EVCharge.repository.StationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class StationService {

    @Autowired
    private StationRepository stationRepository;

    // ‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ñ —Ç–∏–ø–∏ –∫–æ–Ω–µ–∫—Ç–æ—Ä—ñ–≤
    private static final Set<String> ALLOWED_CONNECTORS = Set.of("CCS2", "CHADEMO", "GB/T");

    public List<Station> getAllStations() {
        return stationRepository.findAll();
    }

    public Optional<Station> getStationById(Long id) {
        return stationRepository.findById(id);
    }

    public Station addStation(Station station) {
        if (stationRepository.existsByLocationName(station.getLocationName())) {
            throw new RuntimeException("–°—Ç–∞–Ω—Ü—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!");
        }

        if (station.getConnectors() == null || station.getConnectors().trim().isEmpty()) {
            throw new RuntimeException("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–æ–Ω–µ–∫—Ç–æ—Ä.");
        }

        validateConnectors(station.getConnectors());

        if (stationRepository.existsByLatitudeAndLongitude(station.getLatitude(), station.getLongitude())) {
            throw new RuntimeException("–°—Ç–∞–Ω—Ü—ñ—è –∑ —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤–∂–µ —ñ—Å–Ω—É—î!");
        }

        return stationRepository.save(station);
    }

    public void deleteStation(Long id) {
        stationRepository.deleteById(id);
    }

    public Station updateStation(Long id, Station updatedStation) {
        return stationRepository.findById(id)
                .map(existingStation -> {
                    if (!updatedStation.getLocationName().equalsIgnoreCase(existingStation.getLocationName()) &&
                            stationRepository.existsByLocationName(updatedStation.getLocationName())) {
                        throw new RuntimeException("–°—Ç–∞–Ω—Ü—ñ—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!");
                    }

                    if ((updatedStation.getLatitude() != existingStation.getLatitude() ||
                            updatedStation.getLongitude() != existingStation.getLongitude()) &&
                            stationRepository.existsByLatitudeAndLongitude(updatedStation.getLatitude(), updatedStation.getLongitude())) {
                        throw new RuntimeException("–°—Ç–∞–Ω—Ü—ñ—è –∑ —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤–∂–µ —ñ—Å–Ω—É—î!");
                    }

                    // ‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω–µ–∫—Ç–æ—Ä—ñ–≤
                    validateConnectors(updatedStation.getConnectors());

                    existingStation.setLocationName(updatedStation.getLocationName());
                    existingStation.setAddress(updatedStation.getAddress());
                    existingStation.setPowerKw(updatedStation.getPowerKw());
                    existingStation.setConnectors(updatedStation.getConnectors());
                    existingStation.setManufacturer(updatedStation.getManufacturer());
                    existingStation.setPricePerKwh(updatedStation.getPricePerKwh());
                    existingStation.setStatus(updatedStation.getStatus());
                    existingStation.setLatitude(updatedStation.getLatitude());
                    existingStation.setLongitude(updatedStation.getLongitude());

                    return stationRepository.save(existingStation);
                })
                .orElseThrow(() -> new RuntimeException("–°—Ç–∞–Ω—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
    }

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –∫–æ–Ω–µ–∫—Ç–æ—Ä—ñ–≤
    private void validateConnectors(String connectors) {
        List<String> list = List.of(connectors.split(",")).stream()
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList());

        if (list.isEmpty()) {
            throw new RuntimeException("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–Ω–µ–∫—Ç–æ—Ä.");
        }

        for (String connector : list) {
            String upper = connector.toUpperCase();
            if (!ALLOWED_CONNECTORS.contains(upper)) {
                throw new RuntimeException("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ç–∏–ø –∫–æ–Ω–µ–∫—Ç–æ—Ä–∞: " + connector);
            }
        }
    }
}
